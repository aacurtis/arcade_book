# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Paul Vincent Craven
# This file is distributed under the same license as the Arcade package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Paul V Craven <paul@cravenfamily.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Arcade 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-13 15:19-0500\n"
"PO-Revision-Date: 2020-04-03 18:43+0000\n"
"Last-Translator: Paul V Craven <paul@cravenfamily.com>, 2020\n"
"Language-Team: German (https://www.transifex.com/arcade-academy/teams/108729/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:4
msgid "Drawing With Functions"
msgstr "Zeichnen mit Funktionen"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:6
msgid ""
"We learned how to draw in :ref:`how-to-draw`. In :ref:`lab-02` we applied "
"that to create our own drawing. We learned how to create functions in "
":ref:`creating_functions`. In this chapter, we'll combine all that knowledge"
" to create our own drawing functions."
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:11
msgid "We'll do that by expanding on the code you wrote for :ref:`lab-02`."
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:13
msgid ""
"To show you how, I'm going to start with a similar program and convert it to"
" using functions."
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:16
msgid "First the original program:"
msgstr "Hier ist erst einmal das originale Programm:"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rstNone
msgid ".. image:: chapters/09_drawing_with_functions/snowman1.png"
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:21
msgid ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"arcade.start_render()\n"
"\n"
"# Draw the ground\n"
"arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"# Draw a snow person\n"
"\n"
"# Snow\n"
"arcade.draw_circle_filled(300, 200, 60, arcade.color.WHITE)\n"
"arcade.draw_circle_filled(300, 280, 50, arcade.color.WHITE)\n"
"arcade.draw_circle_filled(300, 340, 40, arcade.color.WHITE)\n"
"\n"
"# Eyes\n"
"arcade.draw_circle_filled(285, 350, 5, arcade.color.BLACK)\n"
"arcade.draw_circle_filled(315, 350, 5, arcade.color.BLACK)\n"
"\n"
"#  Finish and run\n"
"arcade.finish_render()\n"
"arcade.run()\n"
msgstr ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"arcade.start_render()\n"
"\n"
"# Draw the ground\n"
"arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"# Draw a snow person\n"
"\n"
"# Snow\n"
"arcade.draw_circle_filled(300, 200, 60, arcade.color.WHITE)\n"
"arcade.draw_circle_filled(300, 280, 50, arcade.color.WHITE)\n"
"arcade.draw_circle_filled(300, 340, 40, arcade.color.WHITE)\n"
"\n"
"# Eyes\n"
"arcade.draw_circle_filled(285, 350, 5, arcade.color.BLACK)\n"
"arcade.draw_circle_filled(315, 350, 5, arcade.color.BLACK)\n"
"\n"
"#  Finish and run\n"
"arcade.finish_render()\n"
"arcade.run()\n"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:25
msgid ""
"Ok, it isn't very fancy, but that will make this process easier to follow."
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:30
msgid "Make The ``main`` Function"
msgstr "Erstelle die Funktion ``main``"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:32
msgid ""
"After copying the code into Lab 3, we'll create a ``main()`` function. Put "
"everything in it, and call the ``main`` function."
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:35
msgid ""
"Are those too many lines to indent? You can indent groups of lines by "
"selecting them, and then hitting \"tab\". If you want to un-indent a group "
"of lines, hit shift-tab."
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:39
msgid ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"    arcade.start_render()\n"
"\n"
"    # Draw the ground\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"    # Draw a snow person\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(300, 200, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300, 280, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300, 340, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(285, 350, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(315, 350, 5, arcade.color.BLACK)\n"
"\n"
"    # Finish and run\n"
"    arcade.finish_render()\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"
msgstr ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"    arcade.start_render()\n"
"\n"
"    # Draw the ground\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"    # Draw a snow person\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(300, 200, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300, 280, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300, 340, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(285, 350, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(315, 350, 5, arcade.color.BLACK)\n"
"\n"
"    # Finish and run\n"
"    arcade.finish_render()\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:43
msgid ""
"After this, run your program and make sure it still works before proceeding."
" If it doesn't work, stop and get help. Continuing will only make the "
"problem harder."
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:50
msgid "Make The Drawing Functions"
msgstr "Erstelle die Zeichenfunktion"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:52
msgid ""
"Next, pick an item to move to a function. Start with an easy one if you have"
" it."
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:55
msgid "Grass Function"
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:57
msgid ""
"I chose grass to start withbecause it was only one line of code, and I "
"wasn't going to ever try to position it with an x, y coordinate."
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:60
msgid ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def draw_grass():\n"
"    \"\"\" Draw the ground \"\"\"\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"    arcade.start_render()\n"
"\n"
"    draw_grass()\n"
"\n"
"    # Draw a snow person\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(300, 200, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300, 280, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300, 340, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(285, 350, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(315, 350, 5, arcade.color.BLACK)\n"
"\n"
"    # Finish and run\n"
"    arcade.finish_render()\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"
msgstr ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def draw_grass():\n"
"    \"\"\" Draw the ground \"\"\"\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"    arcade.start_render()\n"
"\n"
"    draw_grass()\n"
"\n"
"    # Draw a snow person\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(300, 200, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300, 280, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300, 340, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(285, 350, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(315, 350, 5, arcade.color.BLACK)\n"
"\n"
"    # Finish and run\n"
"    arcade.finish_render()\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:65
msgid "Test, and make sure it is working."
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:68
msgid "Snow Person Function"
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:70
msgid "Now let's take the more complex snow person and put it in a function."
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:72
msgid ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def draw_grass():\n"
"    \"\"\" Draw the ground \"\"\"\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"\n"
"def draw_snow_person():\n"
"    \"\"\" Draw a snow person \"\"\"\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(300, 200, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300, 280, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300, 340, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(285, 350, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(315, 350, 5, arcade.color.BLACK)\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"    arcade.start_render()\n"
"\n"
"    draw_grass()\n"
"    draw_snow_person()\n"
"\n"
"    # Finish and run\n"
"    arcade.finish_render()\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"
msgstr ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def draw_grass():\n"
"    \"\"\" Draw the ground \"\"\"\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"\n"
"def draw_snow_person():\n"
"    \"\"\" Draw a snow person \"\"\"\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(300, 200, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300, 280, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300, 340, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(285, 350, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(315, 350, 5, arcade.color.BLACK)\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"    arcade.start_render()\n"
"\n"
"    draw_grass()\n"
"    draw_snow_person()\n"
"\n"
"    # Finish and run\n"
"    arcade.finish_render()\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:77
msgid ""
"But this draws the snowman only at one spot. I want to draw lots of snowmen,"
" anywhere I put them!"
msgstr ""
"Aber dies zeichnet den Schneemann nur an einer bestimmten Stelle. Ich will "
"viele Schneemänner an beliebigen Orten zeichnen!"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:80
msgid "To do this, let's add an x and y:"
msgstr "Lass und x und y hinzufügen, um dieses Ziel zu erreichen:"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rstNone
msgid ".. image:: chapters/09_drawing_with_functions/snowman2.png"
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:85
msgid ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def draw_grass():\n"
"    \"\"\" Draw the ground \"\"\"\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"\n"
"def draw_snow_person(x, y):\n"
"    \"\"\" Draw a snow person \"\"\"\n"
"\n"
"    # Draw a point at x, y for reference\n"
"    arcade.draw_point(x, y, arcade.color.RED, 5)\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(300 + x, 200 + y, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300 + x, 280 + y, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300 + x, 340 + y, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(285 + x, 350 + y, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(315 + x, 350 + y, 5, arcade.color.BLACK)\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"    arcade.start_render()\n"
"\n"
"    draw_grass()\n"
"    draw_snow_person(50, 50)\n"
"\n"
"    # Finish and run\n"
"    arcade.finish_render()\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"
msgstr ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def draw_grass():\n"
"    \"\"\" Draw the ground \"\"\"\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"\n"
"def draw_snow_person(x, y):\n"
"    \"\"\" Draw a snow person \"\"\"\n"
"\n"
"    # Draw a point at x, y for reference\n"
"    arcade.draw_point(x, y, arcade.color.RED, 5)\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(300 + x, 200 + y, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300 + x, 280 + y, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(300 + x, 340 + y, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(285 + x, 350 + y, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(315 + x, 350 + y, 5, arcade.color.BLACK)\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"    arcade.start_render()\n"
"\n"
"    draw_grass()\n"
"    draw_snow_person(50, 50)\n"
"\n"
"    # Finish and run\n"
"    arcade.finish_render()\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:90
msgid ""
"But that's not perfect. If you'll note, I added a dot at the x and y. The "
"snowman draws way off from the dot, because originally I didn't try to draw "
"it at 0, 0. I need to recenter the snowman on the dot."
msgstr ""
"Aber das ist nicht perfekt. Wie du bemerken wirst, habe ich einen Punkt zu x"
" und y addiert. Der Schneemann wird abseits von diesem Punkt gezeichnet, "
"weil ich ursprünglich versucht habe ihn auf 0, 0 bezogen zu zeichnen. Ich "
"muss den Schneemann auf dem Punkt neu zentrieren."

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:94
msgid ""
"We need to re-center the shape onto the spot we are drawing. Typically "
"you'll need to subtract from all the x and y values the same amount."
msgstr ""
"Wir müssen die Form neu auf den Punkt, an dem wir zeichnen, zentrieren. "
"Üblicherweise wirst du von allen x- und y-Werten den gleichen Betrag "
"abziehen."

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rstNone
msgid ".. image:: chapters/09_drawing_with_functions/snowman3.png"
msgstr ""

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:100
msgid ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def draw_grass():\n"
"    \"\"\" Draw the ground \"\"\"\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"\n"
"def draw_snow_person(x, y):\n"
"    \"\"\" Draw a snow person \"\"\"\n"
"\n"
"    # Draw a point at x, y for reference\n"
"    arcade.draw_point(x, y, arcade.color.RED, 5)\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(x, 60 + y, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(x, 140 + y, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(x, 200 + y, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(x - 15, 210 + y, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(x + 15, 210 + y, 5, arcade.color.BLACK)\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"    arcade.start_render()\n"
"\n"
"    draw_grass()\n"
"    draw_snow_person(150, 140)\n"
"    draw_snow_person(450, 180)\n"
"\n"
"    # Finish and run\n"
"    arcade.finish_render()\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"
msgstr ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def draw_grass():\n"
"    \"\"\" Draw the ground \"\"\"\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"\n"
"def draw_snow_person(x, y):\n"
"    \"\"\" Draw a snow person \"\"\"\n"
"\n"
"    # Draw a point at x, y for reference\n"
"    arcade.draw_point(x, y, arcade.color.RED, 5)\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(x, 60 + y, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(x, 140 + y, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(x, 200 + y, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(x - 15, 210 + y, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(x + 15, 210 + y, 5, arcade.color.BLACK)\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"    arcade.start_render()\n"
"\n"
"    draw_grass()\n"
"    draw_snow_person(150, 140)\n"
"    draw_snow_person(450, 180)\n"
"\n"
"    # Finish and run\n"
"    arcade.finish_render()\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:108
msgid "How To Animate A Drawing Function"
msgstr "Wie man eine Zeichenfunktion animiert"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:110
msgid "We can animate our drawing if we want. Here are the steps."
msgstr ""
"Wir können unsere erste Zeichnung animieren, wenn wir wollen. Hier sind die "
"nötigen Schritte."

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:113
msgid "Create An ``on_draw`` Method"
msgstr "Erstelle eine ``on_draw``-Methode"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:115
msgid ""
"Right now our program only draws our image once. We need to move all the "
"drawing code in our ``main`` to an ``on_draw`` function. Then we'll tell the"
" computer to draw that over and over."
msgstr ""
"Bis jetzt zeichnet unser Programm unser Bild nur einmal. Wir müssen den "
"Zeichen-Code von unserer ``main``- in eine ``on_draw``-Funktion verschieben."
" Dann müssen wir dem Rechner sagen, das immer und immer wieder zu zeichnen."

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:119
msgid "Continuing from our last example, our program will look like:"
msgstr ""
"Von unserem letzten Beispiel fortgeführt, wird unser Programm so aussehen:"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:121
msgid ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def draw_grass():\n"
"    \"\"\" Draw the ground \"\"\"\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"\n"
"def draw_snow_person(x, y):\n"
"    \"\"\" Draw a snow person \"\"\"\n"
"\n"
"    # Draw a point at x, y for reference\n"
"    arcade.draw_point(x, y, arcade.color.RED, 5)\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(x, 60 + y, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(x, 140 + y, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(x, 200 + y, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(x - 15, 210 + y, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(x + 15, 210 + y, 5, arcade.color.BLACK)\n"
"\n"
"\n"
"def on_draw(delta_time):\n"
"    \"\"\" Draw everything \"\"\"\n"
"    arcade.start_render()\n"
"\n"
"    draw_grass()\n"
"    draw_snow_person(150, 140)\n"
"    draw_snow_person(450, 180)\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"\n"
"    # Call on_draw every 60th of a second.\n"
"    arcade.schedule(on_draw, 1/60)\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"
msgstr ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def draw_grass():\n"
"    \"\"\" Draw the ground \"\"\"\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"\n"
"def draw_snow_person(x, y):\n"
"    \"\"\" Draw a snow person \"\"\"\n"
"\n"
"    # Draw a point at x, y for reference\n"
"    arcade.draw_point(x, y, arcade.color.RED, 5)\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(x, 60 + y, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(x, 140 + y, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(x, 200 + y, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(x - 15, 210 + y, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(x + 15, 210 + y, 5, arcade.color.BLACK)\n"
"\n"
"\n"
"def on_draw(delta_time):\n"
"    \"\"\" Draw everything \"\"\"\n"
"    arcade.start_render()\n"
"\n"
"    draw_grass()\n"
"    draw_snow_person(150, 140)\n"
"    draw_snow_person(450, 180)\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"\n"
"    # Call on_draw every 60th of a second.\n"
"    arcade.schedule(on_draw, 1/60)\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:126
msgid ""
"Do this with your own program. Nothing will move, but it should still run."
msgstr ""
"Mach dies mit deinem eigenen Programm. Es wird sich nichts bewegen, aber es "
"sollte immer noch laufen."

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:129
msgid "Add Variable To Control Where We Draw Our Item"
msgstr "Füge Variablen hinzu, die festlegen wo wir unser Element zeichnen"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:131
msgid ""
"Next, we are going to create a variable inside of the ``on_draw`` function. "
"This variable will hold our *x* value. Each time we call ``on_draw``, we'll "
"change *x* so that it moves to the right."
msgstr ""
"Als nächstes erstellen wir eine Variable innerhalb der ``on_draw``-Funktion."
" Dies Variable wird unseren *x*-Wert enthalten. Jedes Mal, wenn wir "
"``on_draw`` aufrufen, ändern wir *x*, so dass er sich nach rechts bewegt."

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:135
msgid ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def draw_grass():\n"
"    \"\"\" Draw the ground \"\"\"\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"\n"
"def draw_snow_person(x, y):\n"
"    \"\"\" Draw a snow person \"\"\"\n"
"\n"
"    # Draw a point at x, y for reference\n"
"    arcade.draw_point(x, y, arcade.color.RED, 5)\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(x, 60 + y, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(x, 140 + y, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(x, 200 + y, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(x - 15, 210 + y, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(x + 15, 210 + y, 5, arcade.color.BLACK)\n"
"\n"
"\n"
"def on_draw(delta_time):\n"
"    \"\"\" Draw everything \"\"\"\n"
"    arcade.start_render()\n"
"\n"
"    draw_grass()\n"
"    draw_snow_person(on_draw.snow_person1_x, 140)\n"
"    draw_snow_person(450, 180)\n"
"\n"
"    # Add one to the x value, making the snow person move right\n"
"    # Negative numbers move left. Larger numbers move faster.\n"
"    on_draw.snow_person1_x += 1\n"
"\n"
"\n"
"# Create a value that our on_draw.snow_person1_x will start at.\n"
"on_draw.snow_person1_x = 150\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"\n"
"    # Call on_draw every 60th of a second.\n"
"    arcade.schedule(on_draw, 1/60)\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"
msgstr ""
"import arcade\n"
"\n"
"SCREEN_WIDTH = 800\n"
"SCREEN_HEIGHT = 600\n"
"\n"
"\n"
"def draw_grass():\n"
"    \"\"\" Draw the ground \"\"\"\n"
"    arcade.draw_lrbt_rectangle_filled(0, SCREEN_WIDTH, SCREEN_HEIGHT / 3, 0, arcade.color.AIR_SUPERIORITY_BLUE)\n"
"\n"
"\n"
"def draw_snow_person(x, y):\n"
"    \"\"\" Draw a snow person \"\"\"\n"
"\n"
"    # Draw a point at x, y for reference\n"
"    arcade.draw_point(x, y, arcade.color.RED, 5)\n"
"\n"
"    # Snow\n"
"    arcade.draw_circle_filled(x, 60 + y, 60, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(x, 140 + y, 50, arcade.color.WHITE)\n"
"    arcade.draw_circle_filled(x, 200 + y, 40, arcade.color.WHITE)\n"
"\n"
"    # Eyes\n"
"    arcade.draw_circle_filled(x - 15, 210 + y, 5, arcade.color.BLACK)\n"
"    arcade.draw_circle_filled(x + 15, 210 + y, 5, arcade.color.BLACK)\n"
"\n"
"\n"
"def on_draw(delta_time):\n"
"    \"\"\" Draw everything \"\"\"\n"
"    arcade.start_render()\n"
"\n"
"    draw_grass()\n"
"    draw_snow_person(on_draw.snow_person1_x, 140)\n"
"    draw_snow_person(450, 180)\n"
"\n"
"    # Add one to the x value, making the snow person move right\n"
"    # Negative numbers move left. Larger numbers move faster.\n"
"    on_draw.snow_person1_x += 1\n"
"\n"
"\n"
"# Create a value that our on_draw.snow_person1_x will start at.\n"
"on_draw.snow_person1_x = 150\n"
"\n"
"\n"
"def main():\n"
"    arcade.open_window(SCREEN_WIDTH, SCREEN_HEIGHT, \"Drawing with Functions\")\n"
"    arcade.set_background_color(arcade.color.DARK_BLUE)\n"
"\n"
"    # Call on_draw every 60th of a second.\n"
"    arcade.schedule(on_draw, 1/60)\n"
"    arcade.run()\n"
"\n"
"\n"
"# Call the main function to get the program started.\n"
"main()\n"

#: ../../source/chapters/09_drawing_with_functions/drawing_with_functions.rst:140
msgid "For more information, see the `Bouncing Rectangle Example`_."
msgstr "Für weitere Information sie dir das `Bouncing Rectangle Example`_ an."
